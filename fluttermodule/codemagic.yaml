# Codemagic workflow definitions.
#
# Look for "TODO" comments and fill in the missing data. Once it's finished, remove this line.

common_vars: &common_vars
  OBFUSCATION_OUTPUT_DIR: "build/app/outputs"

email_publishing: &email_publishing
  email:
    notify:
      success: true
      failure: false
    recipients:
      - michel.f@theprojectfactory.com
      - developer@neura.edu.au

common_environments: &common_environments
  flutter: 3.29.1
  java: 17
  xcode: 16.2 # The xcode version defines the macos machine, even if we are using the Mac to build for Android.
  cocoapods: 1.16.2
  groups:
    - git_credentials

common_cache: &common_cache
  cache_paths:
    - $FLUTTER_ROOT/.pub-cache
    - $HOME/.gradle/caches

common_slack_publishing: &common_slack_publishing
  slack:
    channel: "#app_builds"
    notify_on_build_start: true
    notify:
      success: true
      failure: true

common_android_workflow: &common_android_workflow
  name: Android Workflow
  instance_type: linux_x2
  max_build_duration: 120
  environment:
    #TODO(init): Create and upload keystore
    android_signing:
      - keystore_reference
    vars:
      <<: *common_vars
    <<: *common_environments
  cache:
    <<: *common_cache
  scripts:
    - name: Set up local.properties
      script: |
        echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      # TODO: Maybe remove flutter clean and save time?
    - name: Clean Flutter packages
      script: |
        flutter clean
    - name: Get Flutter packages
      script: |
        flutter pub get
    - name: Generate code
      script: |
        dart run build_runner build -d
    - name: Generate translations
      script: |
        dart run slang
    - name: Flutter analyze
      script: |
        flutter analyze
    - name: Dart Format with line length of 1000, excluding generated files
      script: |
        dart format --output=none --set-exit-if-changed -l 1000 $(find . -name '*.dart' -not -name '*.g.dart' -not -name '*.gen.dart' -not -name '*.mocks.dart' -not -name '*.freezed.dart')
    - name: Flutter unit tests
      script: |
        flutter test
    - name: Set up keystore
      script: |
        echo $ANDROID_KEYSTORE_FILE | base64 --decode > $ANDROID_KEYSTORE_PATH
    - name: Generate new build number
      script: |
        APP_BUILD_NUMBER=$(curl 'https://app-build-numbers-atqpffl6bq-ts.a.run.app/build_number?projectName=fluttermodule&commitHash='"$CM_COMMIT"'' | jq -r '.buildNumber')
        echo "APP_BUILD_NUMBER=$APP_BUILD_NUMBER" >> $CM_ENV
        echo "Build Number for  commit "$CM_COMMIT" is "$APP_BUILD_NUMBER""
    - name: Build App
      script: |
        flutter build $ARTIFACT_TYPE \
          --build-number=$APP_BUILD_NUMBER \
          --target lib/main_$AMBIENT.dart \
          --flavor $AMBIENT \
          --obfuscate --split-debug-info=$OBFUSCATION_OUTPUT_DIR/symbols \
          --extra-gen-snapshot-options=--save-obfuscation-map=$OBFUSCATION_OUTPUT_DIR/obfuscation_map.json \
          --dart-define=SENTRY_ENVIRONMENT=$AMBIENT
    - name: Upload debug symbols to Sentry
      script: |
        export SENTRY_DIST=$APP_BUILD_NUMBER
        echo "Sentry distribution number: $SENTRY_DIST"
        dart run sentry_dart_plugin
    - name: Upload Datadog symbols
      script: |
        if [ "$AMBIENT" == "production" ]; then
          APP_VERSION=$(awk '/^version:/ {gsub(/[+].*$/, "", $2); print $2}' pubspec.yaml)
          echo "App version + build number is $APP_VERSION+$APP_BUILD_NUMBER"
          npm install -g @datadog/datadog-ci
          export DATADOG_API_KEY="$DATADOG_API_KEY"
          export DATADOG_SITE=us5.datadoghq.com
          shopt -s globstar
          datadog-ci flutter-symbols upload \
            --service-name "fluttermodule" \
            --android-mapping \
            --dart-symbols-location "$OBFUSCATION_OUTPUT_DIR" \
            --android-mapping-location build/**/outputs/**/mapping.txt \
            --version "$APP_VERSION+$APP_BUILD_NUMBER"
        else
          echo "AMBIENT $AMBIENT is not production. Skipping..."
        fi
    - name: Add Release Notes for staging apps
      script: |
        if [ "$AMBIENT" = "staging" ]; then
          commit_message=$(git log -1 --pretty=%s)
          cat <<EOF > release_notes.json
        [
          {
            "language": "en-US",
            "text": "$commit_message"
          }
        ]
        EOF

          echo "Release notes saved to release_notes.json"
        else
          echo "AMBIENT $AMBIENT is not staging. Exiting..."
        fi
  artifacts:
    - build/**/outputs/flutter-apk//**/*.apk
    - build/**/outputs/bundle//**/*.aab
    - build/**/outputs/**/mapping.txt
    - flutter_drive.log
    - $OBFUSCATION_OUTPUT_DIR/symbols/app.android-arm.symbols
    - $OBFUSCATION_OUTPUT_DIR/symbols/app.android-arm64.symbols
    - $OBFUSCATION_OUTPUT_DIR/symbols/app.android-x64.symbols
    - $OBFUSCATION_OUTPUT_DIR/obfuscation_map.json

common_ios_workflow: &common_ios_workflow
  instance_type: mac_mini_m1
  max_build_duration: 120
  integrations:
    app_store_connect: tpf_app_manager_key
  environment:
    <<: *common_environments
    vars:
      <<: *common_vars
      ARTIFACT_TYPE: "ipa"
  scripts:
    - name: Set up code signing settings on Xcode project
      script: |
        xcode-project use-profiles
    - name: Clean Flutter packages
      script: |
        flutter clean
    - name: Get Flutter packages
      script: |
        flutter pub get
    - name: Generate code
      script: |
        dart run build_runner build -d
    - name: Generate translations
      script: |
        dart run slang
    - name: Flutter analyze
      script: |
        flutter analyze
    - name: Dart Format with line length of 1000, excluding generated files
      script: |
        dart format --output=none --set-exit-if-changed -l 1000 $(find . -name '*.dart' -not -name '*.g.dart' -not -name '*.gen.dart' -not -name '*.mocks.dart' -not -name '*.freezed.dart')
    - name: Flutter unit tests
      script: |
        flutter test
    - name: Install FlutterFire
      script: |
        dart pub global activate flutterfire_cli 1.0.0
    # Commenting this in case it's needed in the future. It was after a flutter pub get and an flutter analyze.
    #      - name: Install pods
    #        script: |
    #          find . -name "Podfile" -execdir pod install \;
    - name: Generate new build number
      script: |
        APP_BUILD_NUMBER=$(curl 'https://app-build-numbers-atqpffl6bq-ts.a.run.app/build_number?projectName=fluttermodule&commitHash='"$CM_COMMIT"'' | jq -r '.buildNumber')
        echo "APP_BUILD_NUMBER=$APP_BUILD_NUMBER" >> $CM_ENV
        echo "Build Number for  commit "$CM_COMMIT" is "$APP_BUILD_NUMBER""
    - name: Build ipa
      script: |
        flutter build ipa \
          --build-number=$APP_BUILD_NUMBER \
          --target lib/main_$AMBIENT.dart \
          --flavor $AMBIENT \
          --obfuscate --split-debug-info=$OBFUSCATION_OUTPUT_DIR/symbols \
          --extra-gen-snapshot-options=--save-obfuscation-map=$OBFUSCATION_OUTPUT_DIR/obfuscation_map.json \
          --dart-define=SENTRY_ENVIRONMENT=$AMBIENT \
          --export-options-plist=/Users/builder/export_options.plist
    - name: Upload debug symbols to Sentry
      script: |
        export SENTRY_DIST=$APP_BUILD_NUMBER
        echo "Sentry distribution number: $SENTRY_DIST"
        dart run sentry_dart_plugin
    - name: Upload Datadog symbols
      script: |
        if [ "$AMBIENT" == "production" ]; then
          APP_VERSION=$(awk '/^version:/ {gsub(/[+].*$/, "", $2); print $2}' pubspec.yaml)
          echo "App version + build number is $APP_VERSION+$APP_BUILD_NUMBER"
          npm install -g @datadog/datadog-ci
          export DATADOG_API_KEY="$DATADOG_API_KEY"
          export DATADOG_SITE=us5.datadoghq.com
          shopt -s globstar
          datadog-ci flutter-symbols upload \
            --service-name fluttermodule \
            --dart-symbols-location "$OBFUSCATION_OUTPUT_DIR" \
            --ios-dsyms \
            --version "$APP_VERSION+$APP_BUILD_NUMBER"
        else
          echo "AMBIENT $AMBIENT is not production. Skipping..."
        fi
    - name: Add Release Notes for staging apps
      script: |
        if [ "$AMBIENT" = "staging" ]; then
          commit_message=$(git log -1 --pretty=%s)
          cat <<EOF > release_notes.json
        [
          {
            "language": "en-US",
            "text": "$commit_message"
          }
        ]
        EOF

          echo "Release notes saved to release_notes.json"
        else
          echo "AMBIENT $AMBIENT is not staging. Exiting..."
        fi
  artifacts:
    - build/ios/ipa/*.ipa
    - /tmp/xcodebuild_logs/*.log
    - flutter_drive.log
    - $OBFUSCATION_OUTPUT_DIR/obfuscation_map.json

workflows:
  # Workflow for CI validations, to be used at each Pull Request, for new commits pushed.
  ci-workflow:
    name: CI Workflow
    instance_type: linux_x2
    max_build_duration: 120
    environment:
      vars:
        <<: *common_vars
      <<: *common_environments
    cache:
      <<: *common_cache
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: "*"
          source: true
      cancel_previous_builds: true
    scripts:
      # TODO(JohnnyNguyen): Add if required by ci-workflow, otherwise delete.
      # - name: Set up local.properties
      #   script: |
      #     echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Clean Flutter packages
        script: |
          flutter clean
      - name: Get Flutter packages
        script: |
          flutter pub get
      - name: Generate code
        script: |
          dart run build_runner build -d
      - name: Generate translations
        script: |
          dart run slang
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Dart Format with line length of 1000, excluding generated files
        script: |
          dart format --output=none --set-exit-if-changed -l 1000 $(find . -name '*.dart' -not -name '*.g.dart' -not -name '*.gen.dart' -not -name '*.mocks.dart' -not -name '*.freezed.dart')
      - name: Flutter unit tests
        script: |
          flutter test

  # Workflow for the production app. As soon as there's a new tag, referencing a new build,
  # like "v1.0.0", this workflow will be triggered and submit a new production build in
  # the Play Store.
  android_production_workflow:
    <<: *common_android_workflow
    name: Android Production Workflow
    environment:
      <<: *common_environments
      groups:
        - git_credentials
        - keystore_credentials
        - sentry_credentials
        - datadog_credentials
      vars:
        <<: *common_vars
        PACKAGE_NAME: "au.org.standingtall.prd"
        ARTIFACT_TYPE: "appbundle"
        AMBIENT: "production"
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*"
      cancel_previous_builds: true
    publishing:
      <<: *common_slack_publishing
      <<: *email_publishing

  # Workflow for the staging app. This app should be used for general testing and not
  # the app stores submissions.
  android_staging_workflow:
    <<: *common_android_workflow
    name: Android Staging Workflow
    environment:
      <<: *common_environments
      groups:
        - firebase_credentials
        - git_credentials
        - keystore_credentials
        - sentry_credentials
        - datadog_credentials
      vars:
        <<: *common_vars
        PACKAGE_NAME: "au.org.standingtall.stg"
        ARTIFACT_TYPE: "apk"
        AMBIENT: "staging"
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "release/*"
          source: true
    publishing:
      <<: *common_slack_publishing
      firebase:
        firebase_service_account: $FIREBASE_SERVICE_ACCOUNT
        android:
          app_id: 1:104139762285:android:5fe1a2a31692698ac06d64
          groups:
            - Testers

  # Workflow for the production app. As soon as there's a new tag, referencing a new build,
  # like "v1.0.0", this workflow will be triggered and submit a new production build in
  # the App Store.
  ios_production_workflow:
    <<: *common_ios_workflow
    name: iOS Production Workflow
    environment:
      <<: *common_environments
      ios_signing:
        distribution_type: app_store
        bundle_identifier: "au.org.standingtall.prd"
      groups:
        - firebase_credentials
        - git_credentials
        - sentry_credentials
        - datadog_credentials
      vars:
        <<: *common_vars
        PACKAGE_NAME: "au.org.standingtall.prd"
        AMBIENT: "production"
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*"
      cancel_previous_builds: true
    publishing:
      <<: *common_slack_publishing
      <<: *email_publishing

  # Workflow for the staging app. This app should be used for general testing and not
  # the app stores submissions.
  ios_staging_workflow:
    <<: *common_ios_workflow
    name: iOS Staging Workflow
    environment:
      <<: *common_environments
      ios_signing:
        distribution_type: app_store
        bundle_identifier: "au.org.standingtall.stg"
      groups:
        - firebase_credentials
        - git_credentials
        - sentry_credentials
        - datadog_credentials
      vars:
        <<: *common_vars
        PACKAGE_NAME: "au.org.standingtall.stg"
        AMBIENT: "staging"
        APP_ID: 6711333852
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "release/*"
    publishing:
      <<: *common_slack_publishing
      app_store_connect:
        auth: integration
